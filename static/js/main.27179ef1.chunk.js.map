{"version":3,"sources":["features/mapOfWeather/mapOfWeatherSlice.js","app/rootReducer.js","app/store.js","components/Spinner/spinner.gif","components/Spinner/Spinner.js","components/WeatherMap/WeatherMap.js","app/App.js","index.js"],"names":["mapOfWeatherSlice","createSlice","name","initialState","loading","hasErrors","isResultDataLoaded","weatherData","resultDataForMap","finalForwardGeoData","reducers","getWeather","state","getWeatherSuccess","getWeatherFailure","getWeatherData","payload","pullForwardGeoDataForMap","getFinalForwardGeoDataAndTemperature","newArrayOfResultObject","map","_","key","obj","id","id_stacji","latitude","longitude","temperatura","checkIsResultDataLoaded","isLoadingSelector","mapOfWeatherReducer","isResultDataLoadedSelector","finalForwardGeoDataSelector","actions","rootReducer","combineReducers","configureStore","reducer","Spinner","src","spinner","alt","style","width","heigth","marginLeft","paddingTop","backgroundColor","opacity","position","zIndex","WeatherMap","dispatch","useDispatch","isDataLoading","useSelector","resultDataOfStationAndWeather","pickColor","temperature","Number","useEffect","a","fetch","response","json","allStationWithWeather","promisesOfForwardGeo","i","length","push","stacja","promise","then","resolve","geoData","data","Promise","all","catch","alert","console","log","className","MapContainer","center","zoom","scrollWheelZoom","TileLayer","url","attribution","filteredValidStation","filter","station","undefined","LayerGroup","Marker","Tooltip","permanent","Circle","pathOptions","color","radius","signAllStationAsMarkerOnMap","App","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.27179ef1.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\n/**\r\n * Result shape of one station\r\n * @typedef {Object} FinalGeoData\r\n * @property {string} id\r\n * @property {string=} name\r\n * @property {number=} latitude\r\n * @property {number=} longitude\r\n * @property {string} temperatura\r\n */\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    hasErrors: false,\r\n    isResultDataLoaded: false,\r\n    weatherData: [],\r\n    resultDataForMap: [],\r\n    finalForwardGeoData: [],\r\n}\r\n\r\nconst mapOfWeatherSlice = createSlice({\r\n    name: 'currentTemperature',\r\n    initialState,\r\n    reducers: {\r\n        getWeather(state) {\r\n            state.loading = true\r\n        },\r\n        getWeatherSuccess(state) {\r\n            state.loading = false\r\n            state.hasErrors = false\r\n        },\r\n        getWeatherFailure(state) {\r\n            state.loading = false\r\n            state.hasErrors = true\r\n        },\r\n        getWeatherData(state, { payload }) {\r\n            state.weatherData = payload\r\n        },\r\n        pullForwardGeoDataForMap(state, { payload }) {\r\n            state.resultDataForMap = payload\r\n        },\r\n        getFinalForwardGeoDataAndTemperature(state) {\r\n            const { weatherData, resultDataForMap } = state\r\n\r\n            /**@type {FinalGeoData[]} */\r\n            const newArrayOfResultObject = weatherData.map((_, key) => {\r\n                const obj = {}\r\n\r\n                obj.id = weatherData[key]?.id_stacji\r\n                obj.name = resultDataForMap[key]?.name\r\n                obj.latitude = resultDataForMap[key]?.latitude\r\n                obj.longitude = resultDataForMap[key]?.longitude\r\n                obj.temperatura = weatherData[key]?.temperatura\r\n\r\n                return obj\r\n            })\r\n\r\n            state.finalForwardGeoData = newArrayOfResultObject\r\n        },\r\n        checkIsResultDataLoaded(state) {\r\n            state.isResultDataLoaded = true\r\n        },\r\n    },\r\n})\r\n\r\n/**\r\n * Selector\r\n * @param {object} state - global State\r\n * @returns {boolean}\r\n */\r\nexport const isLoadingSelector = (state) => state.mapOfWeatherReducer.loading\r\n/**\r\n * Selector\r\n * @param {object} state - global State\r\n * @returns {boolean}\r\n */\r\nexport const isResultDataLoadedSelector = (state) =>\r\n    state.mapOfWeatherReducer.isResultDataLoaded\r\n/**\r\n * Selector\r\n * @param {object} state - global State\r\n * @returns {FinalGeoData[]}\r\n */\r\nexport const finalForwardGeoDataSelector = (state) =>\r\n    state.mapOfWeatherReducer.finalForwardGeoData\r\n\r\n// actions\r\nexport const {\r\n    getWeather,\r\n    getWeatherSuccess,\r\n    getWeatherFailure,\r\n    getWeatherData,\r\n    pullForwardGeoDataForMap,\r\n    getFinalForwardGeoDataAndTemperature,\r\n    checkIsResultDataLoaded,\r\n} = mapOfWeatherSlice.actions\r\n\r\n// main reducer\r\nexport default mapOfWeatherSlice.reducer\r\n\r\n// asynchronous thunk action\r\nexport function fetchWeather() {\r\n    return async (dispatch) => {\r\n        dispatch(getWeather())\r\n\r\n        try {\r\n            // get all stations with own weather data\r\n            const response = await fetch(\r\n                'https://danepubliczne.imgw.pl/api/data/synop/'\r\n            )\r\n            const allStationWithWeather = await response.json()\r\n\r\n            dispatch(getWeatherData(allStationWithWeather))\r\n\r\n            // forward geocoding by city name\r\n            // preparing data for Promise.all\r\n            let promisesOfForwardGeo = []\r\n\r\n            for (let i = 0; i < allStationWithWeather.length; i++) {\r\n                promisesOfForwardGeo.push(\r\n                    fetch(\r\n                        `http://api.positionstack.com/v1/forward?access_key=358c451c8bc4c40048fd777aa721ad30&query=1600%${allStationWithWeather[i].stacja}`\r\n                    )\r\n                )\r\n            }\r\n\r\n            promisesOfForwardGeo = promisesOfForwardGeo.map((promise) =>\r\n                promise\r\n                    .then((resolve) => resolve.json())\r\n                    .then((geoData) => {\r\n                        return geoData.data[0]\r\n                    })\r\n            )\r\n\r\n            Promise.all(promisesOfForwardGeo)\r\n                .then((response) => {\r\n                    dispatch(pullForwardGeoDataForMap(response))\r\n\r\n                    dispatch(getFinalForwardGeoDataAndTemperature())\r\n\r\n                    dispatch(getWeatherSuccess())\r\n\r\n                    dispatch(checkIsResultDataLoaded())\r\n                })\r\n                .catch(() => alert('Some problem, please reload page!'))\r\n        } catch (error) {\r\n            dispatch(getWeatherFailure())\r\n            alert('Some problem, please reload page!')\r\n        }\r\n    }\r\n}\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport mapOfWeatherReducer from '../features/mapOfWeather/mapOfWeatherSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    mapOfWeatherReducer\r\n})\r\n\r\nexport default rootReducer","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nexport default configureStore({\r\n    reducer: rootReducer,\r\n})","export default __webpack_public_path__ + \"static/media/spinner.12cffc13.gif\";","import React from 'react'\r\nimport spinner from './spinner.gif'\r\n\r\n/**\r\n * React functional component\r\n * @returns {JSX.Element} gif spinner\r\n */\r\nexport const Spinner = () => (\r\n    <span>\r\n        <img\r\n            src={spinner}\r\n            alt=\"Loading...\"\r\n            style={{\r\n                width: '260px',\r\n                heigth: '160px',\r\n                marginLeft: '45%',\r\n                paddingTop: '300px',\r\n                backgroundColor: 'transparent',\r\n                opacity: '.8',\r\n                position: 'absolute',\r\n                zIndex: 100,\r\n            }}\r\n        />\r\n    </span>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport { Spinner } from '../Spinner/Spinner'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    MapContainer,\r\n    TileLayer,\r\n    Marker,\r\n    Tooltip,\r\n    LayerGroup,\r\n    Circle,\r\n} from 'react-leaflet'\r\n\r\nimport {\r\n    fetchWeather,\r\n    finalForwardGeoDataSelector,\r\n    isResultDataLoadedSelector,\r\n    isLoadingSelector,\r\n} from '../../features/mapOfWeather/mapOfWeatherSlice'\r\n\r\n/**\r\n * React functional component\r\n * @returns {JSX.Element} Map of Poland with the weather of some cities\r\n */\r\nexport const WeatherMap = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isDataLoading = useSelector(isLoadingSelector)\r\n    const isResultDataLoaded = useSelector(isResultDataLoadedSelector)\r\n\r\n    const resultDataOfStationAndWeather = useSelector(\r\n        finalForwardGeoDataSelector\r\n    )\r\n\r\n    /**\r\n     * To get different colors depending on the temperature of a particular station\r\n     *\r\n     * @function pickColor\r\n     * @param {string|number} temperature\r\n     * @returns {string} color rely on input temperature\r\n     */\r\n    function pickColor(temperature) {\r\n        temperature = Number(temperature)\r\n        switch (true) {\r\n            case temperature >= 0 && temperature < 1:\r\n                return '#cc6600'\r\n            case temperature >= 1 && temperature < 2:\r\n                return '#ff9980'\r\n            case temperature >= 2 && temperature < 3:\r\n                return '#ffc266'\r\n            case temperature >= 3 && temperature < 5:\r\n                return '#ff9900'\r\n                case temperature >= 5 && temperature < 7:\r\n                return 'gold'\r\n            case temperature >= 7:\r\n                return '#ff5c33'\r\n            case temperature < 0 && temperature > -2:\r\n                return '#80bfff'\r\n            case temperature <= -2 && temperature > -4:\r\n                return '#0066ff'\r\n            case temperature <= -4:\r\n                return 'blue'\r\n            default:\r\n                return 'papayawhip'\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For checking: if result data of all station is loaded then doing mapping markers on map with name of stations and temperatures\r\n     *\r\n     * @function signAllStationAsMarkerOnMap\r\n     * @returns {JSX.Element[]}\r\n     */\r\n    function signAllStationAsMarkerOnMap() {\r\n        if (isResultDataLoaded) {\r\n            const filteredValidStation = resultDataOfStationAndWeather.filter(\r\n                (station) => station.name !== undefined\r\n            )\r\n\r\n            if (filteredValidStation.length > 0) {\r\n                const allStation = filteredValidStation.map((station) => {\r\n                    return (\r\n                        <LayerGroup key={station.id}>\r\n                            <Marker\r\n                                position={[station.latitude, station.longitude]}\r\n                            >\r\n                                <Tooltip permanent>\r\n                                    {station.name}\r\n                                    <br />\r\n                                    Temperatura: {station.temperatura}°C\r\n                                </Tooltip>\r\n                            </Marker>\r\n\r\n                            <Circle\r\n                                center={[station.latitude, station.longitude]}\r\n                                pathOptions={{\r\n                                    color: pickColor(station.temperatura),\r\n                                }}\r\n                                radius={20000}\r\n                            />\r\n                        </LayerGroup>\r\n                    )\r\n                })\r\n\r\n                return allStation\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    // dispatch thunk when component first mounts\r\n    useEffect(() => {\r\n        dispatch(fetchWeather())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            {isDataLoading ? <Spinner /> : null}\r\n            {console.log(isDataLoading)}\r\n            <div className=\"mainMap\">\r\n                <MapContainer\r\n                    center={[51.9654, 19.0609]}\r\n                    zoom={7}\r\n                    scrollWheelZoom={true}\r\n                >\r\n                    <TileLayer\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    />\r\n                    {signAllStationAsMarkerOnMap()}\r\n                </MapContainer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { WeatherMap } from '../components/WeatherMap/WeatherMap'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <WeatherMap />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './app/store'\r\nimport App from './app/App'\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}